// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./db.sqlite"
  // url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String

  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guestbook {
  id         String   @id @default(cuid())
  email      String //@db.VarChar(256)
  body       String //@db.VarChar(500)
  created_by String //@db.VarChar(256)
  created_at DateTime @default(now()) //@db.DateTime(6)
  updated_at DateTime @updatedAt //@db.DateTime(6)
}

model Post {
  id    String @id @default(cuid())
  title String
  body  String
  slug  String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   String @id @default(cuid())
  body String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Post   Post   @relation(fields: [postId], references: [id])
  postId String

  children Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
